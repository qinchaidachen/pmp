name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 运行ESLint
        run: pnpm lint

      - name: 运行Prettier检查
        run: pnpm format:check

      - name: 运行TypeScript检查
        run: pnpm type-check

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 运行测试
        run: pnpm test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 构建应用
  build:
    name: 构建应用
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      version: ${{ steps.meta.outputs.version }}
      image: ${{ steps.meta.outputs.image }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建应用
        run: pnpm build
        env:
          NODE_ENV: production
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 构建和推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docs/deployment/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行Trivy漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传Trivy扫描结果
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 运行CodeQL分析
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 自动构建
        uses: github/codeql-action/autobuild@v3

      - name: 执行CodeQL分析
        uses: github/codeql-action/analyze@v3

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到测试环境
        run: |
          echo "部署到测试环境"
          # 这里添加实际的部署脚本
          # 例如：使用SSH部署到服务器
          # 或使用kubectl部署到Kubernetes集群

      - name: 运行集成测试
        run: |
          echo "运行集成测试"
          # 运行E2E测试
          pnpm test:e2e:staging

      - name: 发送部署通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 测试环境部署完成
            📦 版本: ${{ needs.build.outputs.version }}
            🔗 链接: https://staging.your-domain.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 等待人工确认
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.APPROVERS }}
          minimum-approvals: 1
          issue-title: "生产环境部署确认"
          issue-body: "请确认是否要部署以下版本到生产环境：\n\n📦 版本: ${{ needs.build.outputs.version }}\n📝 提交: ${{ github.sha }}\n💬 消息: ${{ github.event.head_commit.message }}"

      - name: 部署到生产环境
        run: |
          echo "部署到生产环境"
          # 这里添加实际的部署脚本

      - name: 运行烟雾测试
        run: |
          echo "运行烟雾测试"
          # 运行基本的健康检查
          curl -f https://your-domain.com/health

      - name: 发送部署通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🎉 生产环境部署完成！
            📦 版本: ${{ needs.build.outputs.version }}
            🔗 链接: https://your-domain.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 性能测试
  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 运行负载测试
        run: |
          echo "运行负载测试"
          # 使用k6或其他工具进行负载测试
          k6 run tests/load/test.js

  # 创建发布
  release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 创建发布包
        run: |
          cd dist
          tar -czf ../release-${{ github.event.release.tag_name }}.tar.gz .
          cd ..

      - name: 上传到GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-${{ github.event.release.tag_name }}.tar.gz
          draft: false
          prerelease: ${{ contains(github.event.release.tag_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新Docker标签
        run: |
          # 推送最新标签到Docker Hub
          echo "推送最新标签到Docker Hub"

  # 清理
  cleanup:
    name: 清理
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, release]
    if: always()
    steps:
      - name: 清理旧镜像
        run: |
          echo "清理旧镜像"
          # 清理旧的Docker镜像以节省存储空间

      - name: 清理构建缓存
        run: |
          echo "清理构建缓存"
          # 清理GitHub Actions缓存